#!/usr/bin/env python3

# Vadim Zyamalov <vadim.zyamalov@gmail.com>
# Licensed under the conditions of MIT license

import os
import sys
from xdg.DesktopEntry import DesktopEntry as DE
from subprocess import Popen, PIPE


def getcachedir():
    try:
        cachedir = os.environ['XDG_CACHE_HOME']
    except KeyError:
        cachedir = '{}/.cache'.format(os.environ['HOME'])
    return cachedir


def getcachefile():
    try:
        with open(
            '{}/dmenu_drun.cache'.format(getcachedir()),
            'r',
            encoding='utf8'
        ) as cachefile:
            res = {}
            for line in cachefile:
                k, v = tuple(line.strip().split('\t'))
                res[k] = int(v)
        return res
    except FileNotFoundError:
        return {}


def putcachefile(cachedict):
    with open(
        '{}/dmenu_drun.cache'.format(getcachedir()),
        'w',
        encoding='utf8'
    ) as cachefile:
        for key, value in sorted(
            cachedict.items(),
            key=lambda item: item[1],
            reverse=True
        ):
            cachefile.write('{}\t{}\n'.format(key, value))


def getdirlist():
    res = []
    try:
        res.append(
            '{}/applications'.format(os.environ['XDG_DATA_HOME'].rstrip('/'))
        )
    except KeyError:
        res.append(
            '{}/.local/share/applications'.format(os.environ['HOME'])
        )
    try:
        res.extend(
            ['{}/applications'.format(dir.rstrip('/'))
             for dir in os.environ['XDG_DATA_DIRS'].split(':')]
        )
    except KeyError:
        res.extend(
            '/usr/local/share/applications:/usr/share/applications'.split(':')
        )
    return res


def getappdict():
    res = {}
    for path in getdirlist():
        try:
            files = os.listdir(path)
        except FileNotFoundError:
            continue
        for curfile in files:
            if not curfile.endswith('.desktop'):
                continue
            curdesktop = DE('{}/{}'.format(path, curfile))
            if not curdesktop.getType() == 'Application':
                continue
            if curdesktop.getNoDisplay() or curdesktop.getHidden():
                continue
            if curdesktop.getName() not in res:
                res[curdesktop.getName()] = {
                    'exec': curdesktop.getExec(),
                    'term': curdesktop.getTerminal(),
                    'loc': '{}/{}'.format(path, curfile)
                }
    return res


def getapplist(appdict, cachedict):
    res = []
    for key, _ in sorted(
        cachedict.items(),
        key=lambda item: item[1],
        reverse=True
    ):
        if key in appdict:
            res.append(key)
    keys = list(appdict.keys())
    keys.sort()
    for key in keys:
        if key not in res:
            res.append(key)
    return res


def calldmenu(apps):
    dmenu = ['dmenu']
    dmenu.extend(sys.argv[1:])
    appstr = ('\n'.join(apps)).encode('utf8')
    dmenup = Popen(dmenu, stdin=PIPE, stdout=PIPE)
    res, _ = dmenup.communicate(input=appstr)
    exitcode = dmenup.wait()
    if not exitcode:
        return res.decode('utf8').strip()
    else:
        return ''


def search(choice, appdict):
    possible = choice.split(' ')[0]
    possibleargs = choice[len(possible)+1:]
    for key in appdict:
        if ((key.find(possible) > -1) or
                (appdict[key]['exec'].find(possible) > -1)):
            return key, possibleargs
    return '', ''


def arg_fill(choice, appdict, args=''):
    if choice not in appdict:
        return ''
    res = appdict[choice]['exec']
    res = res.replace('%u', args)
    res = res.replace('%U', args)
    res = res.replace('%f', args)
    res = res.replace('%F', args)
    res = res.replace('%c', '"{}"'.format(choice))
    res = res.replace('%k', appdict[choice]['loc'])
    res = res.replace('%i', '')
    res = res.replace('%%', '%')
    return res.strip()


if __name__ == '__main__':
    try:
        term = os.environ['TERMINAL']
    except KeyError:
        term = 'xterm'
    apps = getappdict()
    cache = getcachefile()
    res = calldmenu(
        getapplist(apps, cache)
    )
    args = ''
    if (res != '') and (res not in apps):
        res, args = search(res, apps)
    if res != '':
        if res in cache:
            cache[res] += 1
        else:
            cache[res] = 1
        putcachefile(cache)
        fin = arg_fill(res, apps, args)
        if apps[res]['term']:
            Popen('{} -e {}'.format(term, fin), shell=True)
        else:
            Popen(fin, shell=True)
